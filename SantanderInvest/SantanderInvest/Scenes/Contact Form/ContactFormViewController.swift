//
//  ContactFormViewController.swift
//  SantanderInvest
//
//  Created by Bruno Villanova on 29/05/18.
//  Copyright (c) 2018 Santander. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ContactFormDisplayLogic: class
{
  func displayFormCells(viewModel: ContactForm.FetchCells.ViewModel)
}

class ContactFormViewController: UIViewController, ContactFormDisplayLogic
{
  
  @IBOutlet weak var tableView: UITableView!
  
  var interactor: ContactFormBusinessLogic?
  var router: (NSObjectProtocol & ContactFormRoutingLogic & ContactFormDataPassing)?
  var cells = [FormCell]()

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ContactFormInteractor()
    let presenter = ContactFormPresenter()
    let router = ContactFormRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    fetchFormCells()
  }
  
  // MARK: Fetch Cells
  
  func fetchFormCells()
  {
    let request = ContactForm.FetchCells.Request()
    interactor?.fetchFormCells(request: request)
  }

  func displayFormCells(viewModel: ContactForm.FetchCells.ViewModel) {
    self.cells = viewModel.formCells
    tableView.reloadData()
  }
}

extension ContactFormViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return cells.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    
    let formCellObject = cells[indexPath.row]
    let formCellStyle = FormTableViewCellStyle(rawValue: formCellObject.type!.rawValue)!
    let cellReuseIdentifier = formCellStyle.reuseIdentifier
    var cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier) as? FormTableViewCell
    
    if cell == nil {
      tableView.register(FormTableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)
      cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier) as? FormTableViewCell
    }
    
    cell!.configure(formCellObject)
    cell!.valueChanged = { (cell, formCell, value) in
  
      if formCell.type == FormCellType.field, let value = value as? String? {
        var validValue: Bool?
        
        if formCell.typefield == .email {
          validValue = value?.isValidEmail
        } else if formCell.typefield == .telNumber {
          //TODO: Need API fix! Is not parsing this field correctly because API is returning "typefield": "telnumber" instead of value 2 as expected
          validValue = value?.isValidPhone
        }
        
        cell.isValidValue = validValue
      }
    }
    
    return cell!
  }
}

extension ContactFormViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    return UITableViewAutomaticDimension
  }
}
